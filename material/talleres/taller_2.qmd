# Integración de Python en la Enseñanza de Matemáticas

<center>
<img src="../../images/professor.png" width="400">
</center>

Este taller está diseñado para profesores de matemáticas de enseñanza media que buscan integrar la programación en Python en su currículo. A través de ejemplos prácticos y ejercicios, los profesores aprenderán cómo pueden utilizar Python para hacer que las matemáticas sean más interactivas y atractivas para los estudiantes.

## 🎯 Objetivos del Taller

- Explorar cómo Python puede mejorar la enseñanza de las matemáticas.
- Desarrollar ejercicios de programación que refuercen conceptos matemáticos.
- Proveer herramientas para resolver problemas matemáticos con Python.

## Contexto y Justificación

Integrar Python en la enseñanza de matemáticas permite explorar conceptos de forma dinámica. Su sintaxis clara y numerosas bibliotecas facilitan la demostración de temas, desde aritmética básica hasta cálculo y estadística, enriqueciendo la comprensión matemática de los estudiantes.

### Importancia de Integrar Python en la Educación Media

Incluir Python en la enseñanza media fomenta el interés en ciencias de la computación y refuerza el aprendizaje matemático. Sus beneficios clave son:

1. **Preparación para el futuro**: Desarrolla competencias prácticas para un mundo tecnológico y orientado a datos.

2. **Aplicación en la vida real**: Permite aplicar conceptos matemáticos en problemas reales, haciendo el aprendizaje más tangible.

3. **Pensamiento crítico**: Fomenta el razonamiento lógico y la resolución eficiente de problemas matemáticos.

<center>
<img src="../../images/n01.png" width="700">
</center>

### Impacto en la Educación

La adopción de la programación en la educación ha crecido constantemente, reflejando su relevancia en el aprendizaje moderno.

1. **Globalización de la enseñanza**: El 43% de los países de ingresos altos y el 62% de los países de ingresos medios-altos integran la educación en ciencias de la computación en primaria y secundaria, destacando la importancia de las competencias tecnológicas para el futuro laboral.

2. **Distribución geográfica**: Mientras América del Norte y Europa avanzan en la programación en el aula, América Latina y el sudeste asiático implementan programas piloto y currículos nacionales.

3. **Desigualdad en el acceso**: Aunque el 91% de los países lanzaron plataformas de aprendizaje online durante la pandemia, solo un cuarto de los estudiantes tuvo acceso, evidenciando barreras en áreas rurales y entre estudiantes de bajos ingresos.

<center>
<img src="../../images/n02.png" width="700">
</center>

### Demanda en el Mercado Laboral

Las habilidades en programación y matemáticas son esenciales en la educación y el mercado laboral. Las tendencias clave incluyen:

1. **Crecimiento en desarrollo de software**: El U.S. Bureau of Labor Statistics proyecta un crecimiento del 22% en la demanda de desarrolladores de software entre 2020 y 2030.

2. **Demanda de habilidades matemáticas**: Según LinkedIn, puestos como ciencia de datos y análisis financiero crecen a un 33% anual.

3. **Salarios competitivos**: Los programadores en EE. UU. ganan un promedio de $110,000 al año, mientras que matemáticos y analistas cuantitativos ganan alrededor de $100,000.

<center>
<img src="../../images/n03.png" width="500">
</center>


### Perspectiva de Género

La disparidad de género en programación y matemáticas es un desafío persistente:

1. **Programación**: Solo el 21% de los puestos en informática son ocupados por mujeres, aunque hay crecientes iniciativas para reducir esta brecha.

2. **Matemáticas**: Aunque el 47% de los estudiantes de pregrado son mujeres, solo el 29% de los puestos académicos permanentes las incluyen, reflejando la necesidad de avanzar en la equidad de género.

<center>
<img src="../../images/n04.png" width="300">
</center>

### Python y las Matemáticas Aplicadas

Python es esencial en matemáticas aplicadas y ciencia de datos por varias razones:

1. **Flexibilidad**: Bibliotecas como NumPy, Pandas, Matplotlib y SymPy facilitan cálculos complejos y visualizaciones eficientes.

2. **Machine learning**: El 85% de los científicos de datos considera que las matemáticas son cruciales para el desarrollo de algoritmos, y Python es el lenguaje preferido.

3. **Visualización de datos**: Permite gestionar grandes volúmenes de datos y crear visualizaciones interactivas para un análisis más efectivo.

<center>
<img src="../../images/n05.png" width="300">
</center>


## Ejercicios y Ejemplos Prácticos

### 🔢 Aritmética y Python

Estos ejercicios están diseñados para ayudar a los estudiantes a practicar conceptos aritméticos básicos utilizando Python.


#### 1. Verificar si un Número es Par o Impar

Este ejercicio enseña a los estudiantes a usar el operador módulo (`%`) para determinar si un número es divisible por 2, clasificándolo como "par" o "impar".

- [Número par e impar - Wikipedia](https://es.wikipedia.org/wiki/N%C3%BAmeros_pares_e_impares)


```{pyodide-python}
def es_par(numero):
    if numero % 2 == 0:
        return "par"
    else:
        return "impar"

# Ejemplo de uso
numero = 7
print(f"El número {numero} es {es_par(numero)}.")
```


#### 2. Calcular el Promedio de una Lista de Números

Aquí se muestra cómo calcular el promedio (media aritmética) de una lista de números, sumando los elementos y dividiéndolos por la cantidad de elementos.

- [Media aritmética - Wikipedia](https://es.wikipedia.org/wiki/Media_aritm%C3%A9tica)

```{pyodide-python}
def promedio(numeros):
    return sum(numeros) / len(numeros)

# Ejemplo de uso
numeros = [4, 8, 15, 16, 23, 42]
print(f"El promedio es {promedio(numeros):.2f}")
```

#### 3. Mínimo Común Múltiplo (MCM)

Este ejercicio utiliza el concepto de Mínimo Común Múltiplo, calculando el menor número que es múltiplo común de dos números dados.

- [Mínimo común múltiplo - Wikipedia](https://es.wikipedia.org/wiki/M%C3%ADnimo_com%C3%BAn_m%C3%BAltiplo)

```{pyodide-python}
import math

def mcm(a, b):
    return abs(a * b) // math.gcd(a, b)

# Ejemplo de uso
num1, num2 = 12, 15
print(f"El MCM de {num1} y {num2} es {mcm(num1, num2)}")
```


#### 4. Calcular el Máximo Común Divisor (MCD)

Aquí se utiliza el algoritmo de Euclides para encontrar el mayor número que divide exactamente a dos números, enseñando un método eficiente para encontrar el MCD.

- [Máximo común divisor - Wikipedia](https://es.wikipedia.org/wiki/M%C3%A1ximo_com%C3%BAn_divisor)

```{pyodide-python}
def mcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Ejemplo de uso
num1 = 56
num2 = 98
print(f"El MCD de {num1} y {num2} es {mcd(num1, num2)}")
```

#### 5. Calcular el Factorial de un Número

El ejercicio muestra cómo calcular el factorial de un número, que es el producto de todos los números enteros positivos menores o iguales a ese número.

- [Factorial - Wikipedia](https://es.wikipedia.org/wiki/Factorial)

```{pyodide-python}
import math

def factorial(n):
    return math.factorial(n)

# Ejemplo de uso
numero = 5
print(f"El factorial de {numero} es {factorial(numero)}")
```

---

### 📐 Geometría y Python

Estos ejercicios permiten a los estudiantes interactuar con conceptos geométricos mediante Python.


#### 1. Calcular el Área y Perímetro de un Rectángulo

Este ejercicio muestra cómo calcular el área y el perímetro de un rectángulo usando las fórmulas básicas: multiplicar largo por ancho para el área y sumar dos veces la suma de largo y ancho para el perímetro.

- [Rectángulo - Wikipedia](https://es.wikipedia.org/wiki/Rect%C3%A1ngulo)

```{pyodide-python}
def area_perimetro_rectangulo(largo, ancho):
    area = largo * ancho
    perimetro = 2 * (largo + ancho)
    return area, perimetro

# Ejemplo de uso
largo = 10
ancho = 5
area, perimetro = area_perimetro_rectangulo(largo, ancho)
print(f"El área del rectángulo es {area} y el perímetro es {perimetro}")
```

#### 2. Calcular el Volumen de un Cilindro

En este ejercicio, se calcula el volumen de un cilindro utilizando la fórmula: π × radio² × altura, introduciendo a los estudiantes al concepto de volumen en cuerpos geométricos.

- [Cilindro - Wikipedia](https://es.wikipedia.org/wiki/Cilindro_(geometr%C3%ADa))

```{pyodide-python}
import math

def volumen_cilindro(radio, altura):
    return math.pi * radio ** 2 * altura

# Ejemplo de uso
radio = 3
altura = 7
print(f"El volumen del cilindro es {volumen_cilindro(radio, altura):.2f}")
```

#### 3. Calcular el Área de un Triángulo

Aquí se calcula el área de un triángulo utilizando la fórmula básica: (base × altura) / 2, ayudando a los estudiantes a entender cómo se mide el espacio dentro de un triángulo.

- [Triángulo - Wikipedia](https://es.wikipedia.org/wiki/Tri%C3%A1ngulo)

```{pyodide-python}
def area_triangulo(base, altura):
    return (base * altura) / 2

# Ejemplo de uso
base = 6
altura = 9
print(f"El área del triángulo es {area_triangulo(base, altura):.2f}")
```


#### 4. Calcular el Área de un Círculo

Aquí se calcula el área de un círculo con la fórmula: π × radio², lo que introduce a los estudiantes al uso del número π y a los conceptos de medición en figuras circulares.

- [Círculo - Wikipedia](https://es.wikipedia.org/wiki/C%C3%ADrculo)

```{pyodide-python}
import math

def area_circulo(radio):
    return math.pi * radio ** 2

# Ejemplo de uso
radio = 5
print(f"El área de un círculo con radio {radio} es {area_circulo(radio):.2f}")
```

#### 5. Calcular la Distancia entre dos Puntos

Este ejercicio utiliza la fórmula de la distancia euclidiana para calcular la distancia entre dos puntos en un plano, reforzando el concepto de coordenadas y medidas en la geometría.

- [Distancia euclidiana - Wikipedia](https://es.wikipedia.org/wiki/Distancia_euclidiana)

```{pyodide-python}
import math

def distancia_puntos(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

# Ejemplo de uso
x1, y1 = 2, 3
x2, y2 = 8, 7
print(f"La distancia entre los puntos es {distancia_puntos(x1, y1, x2, y2):.2f}")
```


## Implementación en el Aula con Inteligencia Artificial y ChatGPT

<center>
<img src="../../images/n06.png" width="500">
</center>

<br>

La inteligencia artificial (IA), como ChatGPT, está transformando la enseñanza de matemáticas y programación al crear un entorno de aprendizaje dinámico. Sus beneficios clave incluyen:

1. **Personalización**: Ofrece respuestas adaptadas a cada estudiante, facilitando un aprendizaje inclusivo y al ritmo del alumno.
2. **Retroalimentación**: Brinda correcciones al instante, mejorando la enseñanza de programación al resolver errores en tiempo real.
3. **Acceso global**: Facilita el aprendizaje en cualquier lugar con internet, eliminando barreras geográficas.
4. **Ahorro de tiempo**: Los docentes pueden delegar tareas rutinarias a la IA, enfocándose en aspectos más complejos del aprendizaje.

Junto con plataformas como **Jupyter Notebooks** y **Google Colab**, los estudiantes aplican conceptos mientras reciben asistencia, fortaleciendo sus habilidades técnicas y preparándolos para un mundo tecnológico.

::: {.callout-tip collapse="false" title="Desafío para Profesores:"}
El reto para los profesores es seguir aprendiendo Python y encontrar nuevas formas de integrarlo en la enseñanza de matemáticas. Deben motivar a los estudiantes a profundizar en programación, mostrando cómo puede resolver problemas complejos de forma eficiente.

**ChatGPT** es una herramienta clave en este proceso, ya que ofrece un recurso interactivo para resolver dudas y reforzar el aprendizaje. Al crear ejercicios que combinen Python y matemáticas, y animar a los estudiantes a interactuar con la IA, los docentes fomentan una mayor participación e introducen a los estudiantes a tecnologías emergentes como la inteligencia artificial.
:::

