# Integraci√≥n de Python en la Ense√±anza de Matem√°ticas

<center>
<img src="../../images/professor.png" width="400">
</center>

Este taller, dirigido a profesores de matem√°ticas de ense√±anza media, busca integrar Python en el curr√≠culo para hacer las matem√°ticas m√°s interactivas y atractivas. A trav√©s de ejemplos pr√°cticos, los docentes aprender√°n a utilizar Python para enriquecer su ense√±anza.

## üéØ Objetivos del Taller

- Utilizar Python para mejorar la ense√±anza de matem√°ticas.
- Crear ejercicios de programaci√≥n que refuercen conceptos matem√°ticos.
- Proporcionar herramientas pr√°cticas para resolver problemas matem√°ticos con Python.

## Contexto y Justificaci√≥n

Integrar Python en la ense√±anza de matem√°ticas permite explorar conceptos de forma din√°mica. Su sintaxis clara y numerosas bibliotecas facilitan la demostraci√≥n de temas, desde aritm√©tica b√°sica hasta c√°lculo y estad√≠stica, enriqueciendo la comprensi√≥n matem√°tica de los estudiantes.

### Python en la Educaci√≥n Media

Incluir Python en la ense√±anza media fomenta el inter√©s en ciencias de la computaci√≥n y refuerza el aprendizaje matem√°tico. Sus beneficios clave son:

1. **Preparaci√≥n para el futuro**: Desarrolla competencias pr√°cticas para un mundo tecnol√≥gico y orientado a datos.

2. **Aplicaci√≥n en la vida real**: Permite aplicar conceptos matem√°ticos en problemas reales, haciendo el aprendizaje m√°s tangible.

3. **Pensamiento cr√≠tico**: Fomenta el razonamiento l√≥gico y la resoluci√≥n eficiente de problemas matem√°ticos.

<center>
<img src="../../images/n10.png" width="700">
</center>


### Python en el D√≠a a D√≠a 

<center>
<img src="../../images/n07.png" width="600">
</center>


```{python}
#| echo: false
from great_tables import GT
import pandas as pd

data_impacto = {
    "Aspecto": [
        "Impacto en la Educaci√≥n", 
        "", 
        "Demanda Laboral", 
        "", 
        "Perspectiva de G√©nero", 
        "", 
        "Matem√°ticas Aplicadas", 
        ""
    ],
    "Detalle": [
        "50% de pa√≠ses altos y 60% medios-altos han integrado ciencias de la computaci√≥n.",
        "Solo el 43% de estudiantes en pa√≠ses bajos tienen acceso a Internet en la escuela.",
        "22% de aumento proyectado en desarrolladores de software.",
        "33% de crecimiento anual en cient√≠ficos de datos y analistas financieros.",
        "21% de puestos en inform√°tica son ocupados por mujeres.",
        "Mujeres en matem√°ticas: 47% de estudiantes - solo 29% en puestos acad√©micos.",
        "Flexibilidad en c√°lculos con NumPy y Pandas.",
        "85% de cient√≠ficos de datos prefieren Python para machine learning."
    ],
    "Fuente": [
        "OCDE",
        "UNESCO",
        "U.S. Bureau of Labor Statistics",
        "LinkedIn",
        "OCDE",
        "AAUW",
        "NumFOCUS, Stack Overflow",
        "Kaggle, Stack Overflow"
    ]
}

df_impacto = pd.DataFrame(data_impacto)

(
    GT(df_impacto).opt_stylize(style=2, color="blue")
)
```



## Ejercicios y Ejemplos Pr√°cticos

### ‚úÖ B√°sicos


#### 1. Conversi√≥n de Fahrenheit a Celsius

Este ejercicio ense√±a a los estudiantes a utilizar la f√≥rmula de conversi√≥n para transformar temperaturas de Fahrenheit a Celsius. La f√≥rmula es: 

$$ C = \frac{(F - 32) \times 5}{9}$$

- [Conversi√≥n de grados Fahrenheit a Celsius - Wikipedia](https://es.wikipedia.org/wiki/Grado_Fahrenheit#Conversi%C3%B3n_a_grados_Celsius)

```{pyodide-python}
def fahrenheit_a_celsius(fahrenheit):
    celsius = (fahrenheit - 32) * 5 / 9
    return celsius

# Ejemplo de uso
temperatura_f = 100
print(f"La temperatura {temperatura_f}¬∞F es igual a {fahrenheit_a_celsius(temperatura_f):.2f}¬∞C.")
```


#### 2. C√°lculo del √çndice de Masa Corporal (IMC)

Este ejercicio ense√±a a los estudiantes a calcular el IMC utilizando la f√≥rmula:

$$ IMC = \frac{peso \, (kg)}{altura^2 \, (m^2)}$$

- [√çndice de Masa Corporal - Wikipedia](https://es.wikipedia.org/wiki/%C3%8Dndice_de_masa_corporal)

```{pyodide-python}
def calcular_imc(peso, altura):
    imc = peso / (altura ** 2)
    return imc

# Ejemplo de uso
peso = 70  # en kilogramos
altura = 1.75  # en metros
print(f"El IMC es {calcular_imc(peso, altura):.2f}.")
```




#### 3. Verificar si un N√∫mero es Par o Impar

Este ejercicio ense√±a a los estudiantes a usar el operador m√≥dulo (`%`) para determinar si un n√∫mero es divisible por 2, clasific√°ndolo como "par" o "impar".

- [N√∫mero par e impar - Wikipedia](https://es.wikipedia.org/wiki/N%C3%BAmeros_pares_e_impares)


```{pyodide-python}
def es_par(numero):
    if numero % 2 == 0:
        return "par"
    else:
        return "impar"

# Ejemplo de uso
numero = 7
print(f"El n√∫mero {numero} es {es_par(numero)}.")
```


### üî¢ Aritm√©tica


#### 1. Verificar si un N√∫mero es Primo

Este ejercicio ense√±a a los estudiantes a verificar si un n√∫mero es primo. Un n√∫mero primo es un n√∫mero mayor que 1 que solo tiene dos divisores: 1 y √©l mismo.

- [N√∫mero primo - Wikipedia](https://es.wikipedia.org/wiki/N%C3%BAmero_primo)

```{pyodide-python}
def es_primo(n):
    if n <= 1:
        return f"{n} no es un n√∫mero primo"
    for i in range(2, n):
        if n % i == 0:
            return f"{n} no es un n√∫mero primo"
    return f"{n} es un n√∫mero primo"

# Ejemplo de uso
numero = 29
print(es_primo(numero))
```


#### 2. Conjetura de Collatz

Este ejercicio ense√±a a los estudiantes sobre la conjetura de Collatz, que sugiere que al tomar cualquier n√∫mero entero positivo y aplicar la siguiente secuencia, se llegar√° eventualmente al n√∫mero 1:

a.  Si el n√∫mero es par, se divide entre 2.
b.  Si el n√∫mero es impar, se multiplica por 3 y se le suma 1.

- [Conjetura de Collatz - Wikipedia](https://es.wikipedia.org/wiki/Conjetura_de_Collatz)

```{pyodide-python}
def colllatz(n):
    pasos = []
    while n != 1:
        pasos.append(n)
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
    pasos.append(1)
    return pasos

# Ejemplo de uso
numero = 6
resultado = colllatz(numero)
print(f"La secuencia de Collatz para el n√∫mero {numero} es: {resultado}.")
```




### üìê Geometr√≠a 




#### 1. √Årea y Per√≠metro de un Rect√°ngulo

Este ejercicio ense√±a a los estudiantes a calcular el √°rea y el per√≠metro de un rect√°ngulo utilizando las siguientes f√≥rmulas:

a. **√Årea**: $A = base \times altura$
b. **Per√≠metro**: $P = 2 \times (base + altura)$

- [Rect√°ngulo - Wikipedia](https://es.wikipedia.org/wiki/Rect%C3%A1ngulo)

```{pyodide-python}
def area_perimetro_rectangulo(base, altura):
    area = base * altura
    perimetro = 2 * (base + altura)
    return area, perimetro

# Ejemplo de uso
base = 5
altura = 3
area, perimetro = area_perimetro_rectangulo(base, altura)
print(f"El √°rea del rect√°ngulo es {area} y el per√≠metro es {perimetro}.")
```



#### 2. √Årea y Per√≠metro de un C√≠rculo

Este ejercicio ense√±a a los estudiantes a calcular el √°rea y el per√≠metro (circunferencia) de un c√≠rculo utilizando las siguientes f√≥rmulas:

a. **√Årea**: $A = \pi \times radio^2$
b. **Per√≠metro (Circunferencia)**: $C = 2 \times \pi \times radio$

- [C√≠rculo - Wikipedia](https://es.wikipedia.org/wiki/C%C3%ADrculo)

```{pyodide-python}
import math

def area_perimetro_circulo(radio):
    area = math.pi * radio ** 2
    perimetro = 2 * math.pi * radio
    return area, perimetro

# Ejemplo de uso
radio = 4
area, perimetro = area_perimetro_circulo(radio)
print(f"El √°rea del c√≠rculo es {area:.2f} y el per√≠metro (circunferencia) es {perimetro:.2f}.")
```

### üî§ √Ålgebra 


#### 1. Resoluci√≥n y Gr√°fica de una Ecuaci√≥n Cuadr√°tica

Este ejercicio ense√±a a los estudiantes a resolver ecuaciones cuadr√°ticas de la forma:

$$ ax^2 + bx + c = 0 $$

Utilizando la f√≥rmula cuadr√°tica:

$$ x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$

Y a graficar la funci√≥n cuadr√°tica.

- [Ecuaci√≥n cuadr√°tica - Wikipedia](https://es.wikipedia.org/wiki/Ecuaci%C3%B3n_cuadr%C3%A1tica)

```{pyodide-python}
import numpy as np
import matplotlib.pyplot as plt
import math

def resolver_ecuacion_cuadratica(a, b, c):
    # Calculamos el discriminante
    discriminante = b**2 - 4*a*c
    
    if discriminante < 0:
        return "No hay soluciones reales"
    elif discriminante == 0:
        x = -b / (2*a)
        return f"Una soluci√≥n real: x = {x:.2f}"
    else:
        x1 = (-b + math.sqrt(discriminante)) / (2*a)
        x2 = (-b - math.sqrt(discriminante)) / (2*a)
        return f"Dos soluciones reales: x1 = {x1:.2f}, x2 = {x2:.2f}"

def graficar_ecuacion_cuadratica(a, b, c):
    x = np.linspace(-10, 10, 400)  # Generamos un conjunto de valores x desde -10 hasta 10 con 400 puntos
    y = a * x**2 + b * x + c       # Calculamos los valores y de la ecuaci√≥n cuadr√°tica para cada x

    plt.figure(figsize=(10, 6))     # Creamos una figura para la gr√°fica con un tama√±o espec√≠fico
    plt.plot(x, y, label=f'{a}x¬≤ + {b}x + {c}', color='blue')  # Graficamos la curva de la ecuaci√≥n cuadr√°tica
    
    plt.axhline(0, color='red', lw=0.8, ls='--')  # Dibujamos una l√≠nea horizontal en y = 0 (eje x)
    plt.axvline(0, color='red', lw=0.8, ls='--')  # Dibujamos una l√≠nea vertical en x = 0 (eje y)
    
    plt.title('Gr√°fica de la Ecuaci√≥n Cuadr√°tica')  # Agregamos un t√≠tulo a la gr√°fica
    plt.xlabel('x')  # Etiquetamos el eje x
    plt.ylabel('f(x)')  # Etiquetamos el eje y
    
    plt.xlim(-5, 5)  # Establecemos los l√≠mites del eje x
    plt.ylim(-1, 5)  # Establecemos los l√≠mites del eje y
    
    plt.grid()  # Activamos la cuadr√≠cula en la gr√°fica
    plt.legend()  # Mostramos la leyenda de la gr√°fica
    
    plt.show()  # Mostramos la gr√°fica en pantalla

# Ejemplo de uso
a = 1
b = -3
c = 2
resultado = resolver_ecuacion_cuadratica(a, b, c)
print(f"Para la ecuaci√≥n {a}x¬≤ + {b}x + {c} = 0: {resultado}")

# Graficar la funci√≥n cuadr√°tica
graficar_ecuacion_cuadratica(a, b, c)
```





## Conclusiones

La integraci√≥n de Python en la ense√±anza de matem√°ticas moderniza y enriquece el aprendizaje, facilitando la comprensi√≥n de conceptos a trav√©s de su sintaxis clara y poderosas bibliotecas.

**Puntos Clave**:

1. **Preparaci√≥n para el futuro**: Python desarrolla habilidades pr√°cticas esenciales para un mundo tecnol√≥gico y laboral en constante cambio.

2. **Reducci√≥n de desigualdades**: Es crucial abordar las brechas en el acceso a la tecnolog√≠a y en la equidad de g√©nero para garantizar una educaci√≥n matem√°tica inclusiva.

3. **Python y Matem√°ticas**: Como herramienta clave en la ense√±anza secundaria, Python permite presentar temas complejos de manera accesible y atractiva, fomentando un aprendizaje significativo.



::: {.callout-tip collapse="false" title="Desaf√≠o para Profesores:"}
El desaf√≠o para los profesores es continuar aprendiendo y buscar nuevas formas de motivar a los estudiantes a utilizar Python, fomentando su inter√©s por la ciencia y la tecnolog√≠a. 
:::

> üîë **Nota**: Para aquellos docentes que deseen seguir ampliando sus conocimientos y habilidades, pueden visitar [este sitio de recursos](https://seth-nut.github.io/resources/) para acceder a material educativo adicional.
